#pragma once
#include "dynamicvector.h"
#include "task.h"
#include "repository.h"
#include "service.h"
#include <cassert>

//DynamicVector tests
void add__valid_task__task_added();
void remove__valid_task__task_removed();
void update__valid_task__task_updated();
void search__valid_input__task_found();
void search__valid_input__task_not_found();
void get_title__valid_input__task_passed();
void get_type__valid_input__task_passed();
void get_last_performed_day__valid_input__task_passed();
void get_last_performed_month__valid_input__task_passed();
void get_last_performed_year__valid_input__task_passed();
void get_vision__valid_input__task_passed();
void get_times_performed__valid_input__task_passed();
void is_full__valid__false();
void if_full__valid__true();
void length__valid__returned_length();
void test_dynamicvector();

//Repository tests
void add_valid_input__task_added();
void remove__valid_input__task_removed();
void get_number_of_tasks__valkd_input__number_of_task_returned();
void update__valid_input__task_updated();
void update_title__valid_input__title_updated();
void update_type__valid_input__type_updated();
void update_last_performed_day__valid_input__last_performed_day_updated();
void update_last_performed_month__valid_input__last_performed_month_updated();
void update_last_performed_year__valid_input__last_performed_year_updated();
void update_times_performed__valid_input__times_performed_updated();
void update_vision__valid_input__vision_updated();
void task_duplicate__valid_title__task_found();
void task_duplicate__invalid_title__task_not_found();
void test_repository();

//Service tests
void set_mode__char_A__mode_true();
void set_mode__char_not_A__mode_false();
void add__mode_not_A__task_added();
void add__mode_not_A__task_not_added();
void add__task_duplicate__task_not_added();
void update__mode_not_a__returned_0();
void update__task_not_found__returned_0();
void update__task_found_mode_A__task_updated();
void remove__task_not_found__returned_0();
void remove__mode_not_A__returned_0();
void test_service();
void all_tests();
